---
import '../styles/global.css';
import { ViewTransitions } from 'astro:transitions';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = 'Paola Carrillo | Diseñadora Grafica',
	description = 'Sitio personal de Paola Carrillo',
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>
<ViewTransitions />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>
<script is:inline>
	// Función para obtener la preferencia de tema
	const getThemePreference = () => {
	  if (typeof localStorage !== 'undefined') {
	    const storedTheme = localStorage.getItem('theme');
	    if (storedTheme) {
	      return storedTheme;
	    }
	  }
	  return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	
	// Función para aplicar el tema sin animación
	const applyTheme = (theme, animate = false) => {
	  document.documentElement.classList.toggle('dark', theme === 'dark');
	  if (typeof localStorage !== 'undefined') {
	    localStorage.setItem('theme', theme);
	  }
	  updateToggleButton(theme, animate);
	};
	
	// Función para actualizar el estado del botón de cambio de tema
	const updateToggleButton = (theme, animate = false) => {
	  const toggleButton = document.getElementById('theme-toggle');
	  if (toggleButton) {
	    toggleButton.setAttribute('aria-label', theme === 'dark' ? 'Cambiar a tema claro' : 'Cambiar a tema oscuro');
	    toggleButton.classList.toggle('dark', theme === 'dark');
	    if (animate) {
	      toggleButton.classList.add('theme-transition');
	      setTimeout(() => {
	        toggleButton.classList.remove('theme-transition');
	      }, 500);
	    }
	  }
	};
	
	// Función para inicializar el tema
	const initTheme = () => {
	  const theme = getThemePreference();
	  applyTheme(theme, false);
	};
	
	// Aplicar el tema inicial inmediatamente para evitar parpadeo
	initTheme();
	
	// Escuchar cambios en la preferencia del sistema
	if (typeof window !== 'undefined') {
	  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
	    if (!localStorage.getItem('theme')) {
	      applyTheme(e.matches ? 'dark' : 'light', false);
	    }
	  });
	}
	
	// Función para cambiar el tema manualmente (con animación)
	window.toggleTheme = () => {
	  const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
	  const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
	  applyTheme(newTheme, true);
	};
	
	// Asegurarse de que el tema se aplique correctamente en la carga de la página
	if (document.readyState === 'loading') {
	  document.addEventListener('DOMContentLoaded', initTheme);
	} else {
	  initTheme();
	}
	
	// Aplicar el tema en cada navegación (para SPA o navegación con JavaScript)
	document.addEventListener('astro:after-swap', initTheme);
</script>
