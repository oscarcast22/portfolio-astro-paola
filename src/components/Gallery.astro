---
interface Props {
  images: {
    src: string;
    img_alt?: string | undefined;
  }[];
}

const { images } = Astro.props;
---
<section class="gallery">
  {images.map((image) =>
    <div class="img-card">
      <img src={image.src} alt={image.img_alt}>
    </div>
  )}
</section>

<div class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <img src="" alt="">
    <div class="nav-btns">
      <button class="prev">&#10094;</button>
      <button class="next">&#10095;</button>
    </div>
  </div>
</div>

<style>
  .gallery {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
    margin: 40px 0 20px;
  }

  .img-card {
    position: relative;
    width: 100%;
    padding-bottom: 75%;
    border-radius: 20px;
    overflow: hidden;
    box-shadow: rgba(0, 0, 0, 0.2) -5px 6px 8px 0px;
  }

  .img-card img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: scale 0.3s ease-in-out;
    cursor: pointer;
  }

  .img-card:hover img {
    scale: 1.1;
  }

  @media (max-width: 900px) {
    .gallery {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 530px) {
    .gallery {
      grid-template-columns: 1fr;
    }
  }

  .modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    justify-content: center;
    align-items: center;
    overflow: hidden;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .modal.open {
    display: flex;
  }

  .modal.fade-in {
    opacity: 1;
  }

  .modal-content {
    margin-top: 40px;
    width: 100%;
    height: 100%;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .modal img {
    border-radius: 10px;
    object-fit: cover;
    transition: opacity 0.3s ease;
    height: 70vh;
  }

  .modal img.fade-out {
    opacity: 0;
  }

  .modal img.fade-in {
    opacity: 1;
  }

  .close {
    align-self: self-end;
    margin: 0 30px 15px 0;
    top: -80px;
    right: 20px;
    width: 45px;
    height: 45px;
    text-align: center;
    border-radius: 50%;
    background-color: rgba(0, 0, 0, 0.281);
    color: white;
    font-size: 30px;
    cursor: pointer;
  }

  .close:hover {
    background-color: rgba(0, 0, 0, 0.8);
  }

  .prev,
  .next {
    top: 50%;
    transform: translateY(-50%);
    color: white;
    font-size: 30px;
    width: 45px;
    height: 45px;
    background-color: rgba(0, 0, 0, 0.281);
    border: none;
    cursor: pointer;
    border-radius: 50%;
  }

  .prev {
    left: 15px;
  }

  .next {
    right: 15px;
  }

  .prev:hover,
  .next:hover {
    background-color: rgba(0, 0, 0, 0.8);
  }

  .modal-content {
    flex-direction: column;
  }

  .nav-btns {
    margin: 40px 0 0;
    display: flex;
    gap: 30px;
  }

  @media (max-width: 750px) {
    .prev {
      left: 7px;
    }

    .next {
      right: 7px;
    }
  }

  @media (max-width: 650px) {
    .modal img {
      height: auto;
      width: 95%;
    }

    .prev,
    .next {
      position: static;
      font-size: 20px;
      width: 35px;
      height: 35px;
    }
    .prev {
      left: 7px;
    }

    .next {
      right: 7px;
    }
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    interface ImageInfo {
      src: string;
      img_alt: string;
    }

    const imgCards: NodeListOf<HTMLElement> = document.querySelectorAll('.img-card');
    const images: ImageInfo[] = Array.from(imgCards).map(card => {
      const img = card.querySelector('img') as HTMLImageElement;
      return { src: img.src, img_alt: img.alt };
    });

    let currentIndex: number = 0;
    const modal: HTMLElement = document.querySelector('.modal') as HTMLElement;
    const modalImg: HTMLImageElement = modal.querySelector('img') as HTMLImageElement;

    imgCards.forEach((card, index) => {
      card.addEventListener('click', () => openModal(index));
    });

    (document.querySelector('.close') as HTMLElement).addEventListener('click', closeModal);
    (document.querySelector('.prev') as HTMLElement).addEventListener('click', prevImage);
    (document.querySelector('.next') as HTMLElement).addEventListener('click', nextImage);
    modal.addEventListener('click', handleClickOutside);

    function openModal(index: number): void {
      currentIndex = index;
      modalImg.src = images[index].src;
      modalImg.alt = images[index].img_alt;
      modal.classList.add('open');
      setTimeout(() => {
        modal.classList.add('fade-in');
      }, 10);
    }

    function closeModal(): void {
      modal.classList.remove('fade-in');
      setTimeout(() => {
        modal.classList.remove('open');
      }, 300);
    }

    function nextImage(): void {
      currentIndex = (currentIndex + 1) % images.length;
      changeImage();
    }

    function prevImage(): void {
      currentIndex = (currentIndex - 1 + images.length) % images.length;
      changeImage();
    }

    function changeImage(): void {
      modalImg.classList.add('fade-out');
      setTimeout(() => {
        modalImg.src = images[currentIndex].src;
        modalImg.alt = images[currentIndex].img_alt;
        modalImg.classList.remove('fade-out');
        requestAnimationFrame(() => {
          modalImg.classList.add('fade-in');
          setTimeout(() => {
            modalImg.classList.remove('fade-in');
          }, 300);
        });
      }, 300);
    }

    function handleClickOutside(event: MouseEvent): void {
      const isInImage = (event.target === modalImg);
      const isInNavButtons = (event.target as HTMLElement).closest('.nav-btns') !== null;

      if (!isInImage && !isInNavButtons) {
        closeModal();
      }
    }
  });
</script>






